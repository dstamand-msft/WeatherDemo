trigger:
  branches:
    include:
    - main
    - feature/ci-trigger-check

pool:
  vmImage: 'ubuntu-latest'

variables:
- name: buildConfiguration
  value: Release

name: $(Build.SourceBranchName)-$(Date:yyyyMMdd)$(Rev:.r)
stages:
- stage: buildStage
  displayName: 'Build'
  jobs:
  - job: buildJob
    displayName: 'Build jobs'
    workspace:
      clean: all
    steps:
    - task: DotNetCoreCLI@2
      name: build
      displayName: 'Build'
      inputs:
        command: build
        projects: 'src/WeatherDemo/WeatherDemo.csproj'
        configuration: $(buildConfiguration)
    - task: DotNetCoreCLI@2
      name: test
      displayName: 'Test'
      inputs:
        command: test
        projects: 'tests/**/*.csproj'
        # using coverlet as I'm building on Linux
        arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura'
        publishTestResults: true
    # requires https://github.com/danielpalme/ReportGenerator
    - task: reportgenerator@5
      displayName: 'Merge code coverage reports'
      inputs:
        reports: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
        targetdir: '$(Pipeline.Workspace)/codecoverage'
        reporttypes: 'HtmlInline_AzurePipelines;Cobertura'
        verbosity: 'Verbose'
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Pipeline.Workspace)/codecoverage/Cobertura.xml'
        pathToSources: '$(Build.SourcesDirectory)/src'
        reportDirectory: '$(Pipeline.Workspace)/codecoverage'
        failIfCoverageEmpty: true
      env:
        DISABLE_COVERAGE_AUTOGENERATE: 'true'
    - task: DotNetCoreCLI@2
      name: publish
      displayName: 'Publish'
      inputs:
        command: publish
        publishWebProjects: false
        projects: 'src/WeatherDemo/WeatherDemo.csproj'
        configuration: $(buildConfiguration)
        arguments: '--output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true
        modifyOutputPath: true
    - task: PublishPipelineArtifact@1
      displayName: Publish deployable artifacts
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        parallel: true
        artifactName: 'drop'